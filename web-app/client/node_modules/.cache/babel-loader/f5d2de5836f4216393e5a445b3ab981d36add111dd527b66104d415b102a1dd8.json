{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add request interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const imageApi = {\n  // Get paginated images\n  getImages: async (params = {}) => {\n    const response = await apiClient.get('/images', {\n      params\n    });\n    return response.data;\n  },\n  // Get single image by ID\n  getImage: async id => {\n    const response = await apiClient.get(`/images/${id}`);\n    return response.data;\n  },\n  // Update image metadata\n  updateImageMetadata: async (id, metadata) => {\n    const response = await apiClient.put(`/images/${id}/metadata`, metadata);\n    return response.data;\n  },\n  // Advanced search with filters\n  searchImages: async filters => {\n    const response = await apiClient.post('/search', filters);\n    return response.data;\n  },\n  // Get search suggestions\n  getSearchSuggestions: async query => {\n    const response = await apiClient.get('/search/suggestions', {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  }\n};\nexport const statsApi = {\n  // Get full statistics\n  getStats: async () => {\n    const response = await apiClient.get('/stats');\n    return response.data;\n  },\n  // Get summary statistics\n  getSummaryStats: async () => {\n    const response = await apiClient.get('/stats/summary');\n    return response.data;\n  }\n};\nexport const healthApi = {\n  // Check API health\n  checkHealth: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","withCredentials","interceptors","response","use","error","_error$response","status","window","location","href","Promise","reject","imageApi","getImages","params","get","data","getImage","id","updateImageMetadata","metadata","put","searchImages","filters","post","getSearchSuggestions","query","q","statsApi","getStats","getSummaryStats","healthApi","checkHealth"],"sources":["/Users/jasonglaspey/Coding/Lost Valley - Image Management/web-app/client/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\nimport { ProcessedImage, ImageSearchResponse, StatsResponse, SummaryStats, SearchFilters } from '../types/image';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true,\n});\n\n// Add request interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const imageApi = {\n  // Get paginated images\n  getImages: async (params: {\n    page?: number;\n    limit?: number;\n    sort?: string;\n    order?: string;\n    status?: string;\n  } = {}): Promise<ImageSearchResponse> => {\n    const response = await apiClient.get('/images', { params });\n    return response.data;\n  },\n\n  // Get single image by ID\n  getImage: async (id: string): Promise<ProcessedImage> => {\n    const response = await apiClient.get(`/images/${id}`);\n    return response.data;\n  },\n\n  // Update image metadata\n  updateImageMetadata: async (id: string, metadata: Partial<ProcessedImage>): Promise<{ message: string }> => {\n    const response = await apiClient.put(`/images/${id}/metadata`, metadata);\n    return response.data;\n  },\n\n  // Advanced search with filters\n  searchImages: async (filters: SearchFilters & { page?: number; limit?: number; sort?: string; order?: string }): Promise<ImageSearchResponse> => {\n    const response = await apiClient.post('/search', filters);\n    return response.data;\n  },\n\n  // Get search suggestions\n  getSearchSuggestions: async (query: string): Promise<{ suggestions: string[] }> => {\n    const response = await apiClient.get('/search/suggestions', { params: { q: query } });\n    return response.data;\n  },\n};\n\nexport const statsApi = {\n  // Get full statistics\n  getStats: async (): Promise<StatsResponse> => {\n    const response = await apiClient.get('/stats');\n    return response.data;\n  },\n\n  // Get summary statistics\n  getSummaryStats: async (): Promise<SummaryStats> => {\n    const response = await apiClient.get('/stats/summary');\n    return response.data;\n  },\n};\n\nexport const healthApi = {\n  // Check API health\n  checkHealth: async (): Promise<{ status: string; timestamp: string; uptime: number; environment: string }> => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG;EACtB;EACAC,SAAS,EAAE,MAAAA,CAAOC,MAMjB,GAAG,CAAC,CAAC,KAAmC;IACvC,MAAMZ,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,SAAS,EAAE;MAAED;IAAO,CAAC,CAAC;IAC3D,OAAOZ,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,EAAU,IAA8B;IACvD,MAAMhB,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,WAAWG,EAAE,EAAE,CAAC;IACrD,OAAOhB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAG,mBAAmB,EAAE,MAAAA,CAAOD,EAAU,EAAEE,QAAiC,KAAmC;IAC1G,MAAMlB,QAAQ,GAAG,MAAMN,SAAS,CAACyB,GAAG,CAAC,WAAWH,EAAE,WAAW,EAAEE,QAAQ,CAAC;IACxE,OAAOlB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAM,YAAY,EAAE,MAAOC,OAAyF,IAAmC;IAC/I,MAAMrB,QAAQ,GAAG,MAAMN,SAAS,CAAC4B,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC;IACzD,OAAOrB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAS,oBAAoB,EAAE,MAAOC,KAAa,IAAyC;IACjF,MAAMxB,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,qBAAqB,EAAE;MAAED,MAAM,EAAE;QAAEa,CAAC,EAAED;MAAM;IAAE,CAAC,CAAC;IACrF,OAAOxB,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAG;EACtB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAoC;IAC5C,MAAM3B,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,QAAQ,CAAC;IAC9C,OAAOb,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAc,eAAe,EAAE,MAAAA,CAAA,KAAmC;IAClD,MAAM5B,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,gBAAgB,CAAC;IACtD,OAAOb,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMe,SAAS,GAAG;EACvB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAiG;IAC5G,MAAM9B,QAAQ,GAAG,MAAMN,SAAS,CAACmB,GAAG,CAAC,SAAS,CAAC;IAC/C,OAAOb,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}