{"ast":null,"code":"import React,{useState}from'react';import{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{toast}from'sonner';import{Select,SelectContent,SelectItem,SelectTrigger,SelectValue}from'./ui/select';import{Button}from'./ui/button';import{Loader2,Database,RefreshCw}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const DatabasePicker=_ref=>{let{onDatabaseChange}=_ref;const[selectedDb,setSelectedDb]=useState('');const queryClient=useQueryClient();// Fetch available databases\nconst{data:databases,isLoading:isLoadingDatabases,refetch:refetchDatabases}=useQuery({queryKey:['databases'],queryFn:async()=>{const response=await fetch('/api/databases/list');if(!response.ok)throw new Error('Failed to fetch databases');const data=await response.json();return data.databases;}});// Fetch current database\nconst{data:currentDatabase,isLoading:isLoadingCurrent}=useQuery({queryKey:['current-database'],queryFn:async()=>{const response=await fetch('/api/databases/current');if(!response.ok)throw new Error('Failed to fetch current database');const data=await response.json();return data;}});// Switch database mutation\nconst switchDatabaseMutation=useMutation({mutationFn:async database=>{const response=await fetch('/api/databases/switch',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({database})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to switch database');}return response.json();},onSuccess:data=>{toast.success(`Successfully switched to ${data.database}`);// Invalidate all queries to refetch with new database\nqueryClient.invalidateQueries();onDatabaseChange===null||onDatabaseChange===void 0?void 0:onDatabaseChange(data.database);},onError:error=>{toast.error(`Failed to switch database: ${error.message}`);}});const handleDatabaseChange=database=>{setSelectedDb(database);switchDatabaseMutation.mutate(database);};const handleRefresh=()=>{refetchDatabases();queryClient.invalidateQueries({queryKey:['current-database']});};if(isLoadingDatabases||isLoadingCurrent){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2 text-sm text-gray-500\",children:[/*#__PURE__*/_jsx(Database,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(Loader2,{className:\"h-4 w-4 animate-spin\"}),\"Loading databases...\"]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Database,{className:\"h-4 w-4 text-gray-600\"}),/*#__PURE__*/_jsxs(Select,{value:selectedDb||(currentDatabase===null||currentDatabase===void 0?void 0:currentDatabase.database),onValueChange:handleDatabaseChange,disabled:switchDatabaseMutation.isPending,children:[/*#__PURE__*/_jsx(SelectTrigger,{className:\"w-[220px] h-8 text-sm\",children:/*#__PURE__*/_jsx(SelectValue,{placeholder:\"Select database...\",children:(currentDatabase===null||currentDatabase===void 0?void 0:currentDatabase.displayName)||'Select database...'})}),/*#__PURE__*/_jsx(SelectContent,{children:databases===null||databases===void 0?void 0:databases.map(db=>/*#__PURE__*/_jsx(SelectItem,{value:db.name,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium\",children:db.displayName}),/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-gray-500\",children:db.name})]})},db.name))})]}),/*#__PURE__*/_jsx(Button,{variant:\"outline\",size:\"sm\",onClick:handleRefresh,disabled:isLoadingDatabases,className:\"h-8 px-2\",children:/*#__PURE__*/_jsx(RefreshCw,{className:`h-3 w-3 ${isLoadingDatabases?'animate-spin':''}`})}),switchDatabaseMutation.isPending&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1 text-sm text-blue-600\",children:[/*#__PURE__*/_jsx(Loader2,{className:\"h-3 w-3 animate-spin\"}),\"Switching...\"]})]});};","map":{"version":3,"names":["React","useState","useQuery","useMutation","useQueryClient","toast","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","Button","Loader2","Database","RefreshCw","jsx","_jsx","jsxs","_jsxs","DatabasePicker","_ref","onDatabaseChange","selectedDb","setSelectedDb","queryClient","data","databases","isLoading","isLoadingDatabases","refetch","refetchDatabases","queryKey","queryFn","response","fetch","ok","Error","json","currentDatabase","isLoadingCurrent","switchDatabaseMutation","mutationFn","database","method","headers","body","JSON","stringify","error","onSuccess","success","invalidateQueries","onError","message","handleDatabaseChange","mutate","handleRefresh","className","children","value","onValueChange","disabled","isPending","placeholder","displayName","map","db","name","variant","size","onClick"],"sources":["/Users/jasonglaspey/Coding/Lost Valley - Image Management/web-app/client/src/components/DatabasePicker.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from './ui/select';\nimport { Button } from './ui/button';\nimport { Loader2, Database, RefreshCw } from 'lucide-react';\n\ninterface DatabaseInfo {\n  name: string;\n  displayName: string;\n  path: string;\n}\n\ninterface DatabasePickerProps {\n  onDatabaseChange?: (database: string) => void;\n}\n\nexport const DatabasePicker: React.FC<DatabasePickerProps> = ({ onDatabaseChange }) => {\n  const [selectedDb, setSelectedDb] = useState<string>('');\n  const queryClient = useQueryClient();\n\n  // Fetch available databases\n  const { data: databases, isLoading: isLoadingDatabases, refetch: refetchDatabases } = useQuery({\n    queryKey: ['databases'],\n    queryFn: async () => {\n      const response = await fetch('/api/databases/list');\n      if (!response.ok) throw new Error('Failed to fetch databases');\n      const data = await response.json();\n      return data.databases as DatabaseInfo[];\n    },\n  });\n\n  // Fetch current database\n  const { data: currentDatabase, isLoading: isLoadingCurrent } = useQuery({\n    queryKey: ['current-database'],\n    queryFn: async () => {\n      const response = await fetch('/api/databases/current');\n      if (!response.ok) throw new Error('Failed to fetch current database');\n      const data = await response.json();\n      return data;\n    },\n  });\n\n  // Switch database mutation\n  const switchDatabaseMutation = useMutation({\n    mutationFn: async (database: string) => {\n      const response = await fetch('/api/databases/switch', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ database }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to switch database');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast.success(`Successfully switched to ${data.database}`);\n      // Invalidate all queries to refetch with new database\n      queryClient.invalidateQueries();\n      onDatabaseChange?.(data.database);\n    },\n    onError: (error: Error) => {\n      toast.error(`Failed to switch database: ${error.message}`);\n    },\n  });\n\n  const handleDatabaseChange = (database: string) => {\n    setSelectedDb(database);\n    switchDatabaseMutation.mutate(database);\n  };\n\n  const handleRefresh = () => {\n    refetchDatabases();\n    queryClient.invalidateQueries({ queryKey: ['current-database'] });\n  };\n\n  if (isLoadingDatabases || isLoadingCurrent) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n        <Database className=\"h-4 w-4\" />\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n        Loading databases...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Database className=\"h-4 w-4 text-gray-600\" />\n      <Select\n        value={selectedDb || currentDatabase?.database}\n        onValueChange={handleDatabaseChange}\n        disabled={switchDatabaseMutation.isPending}\n      >\n        <SelectTrigger className=\"w-[220px] h-8 text-sm\">\n          <SelectValue placeholder=\"Select database...\">\n            {currentDatabase?.displayName || 'Select database...'}\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {databases?.map((db) => (\n            <SelectItem key={db.name} value={db.name}>\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium\">{db.displayName}</span>\n                <span className=\"text-xs text-gray-500\">{db.name}</span>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      \n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handleRefresh}\n        disabled={isLoadingDatabases}\n        className=\"h-8 px-2\"\n      >\n        <RefreshCw className={`h-3 w-3 ${isLoadingDatabases ? 'animate-spin' : ''}`} />\n      </Button>\n      \n      {switchDatabaseMutation.isPending && (\n        <div className=\"flex items-center gap-1 text-sm text-blue-600\">\n          <Loader2 className=\"h-3 w-3 animate-spin\" />\n          Switching...\n        </div>\n      )}\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}