{"ast":null,"code":"\"use client\";\n\n// src/checkbox.tsx\nimport * as React from \"react\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar CHECKBOX_NAME = \"Checkbox\";\nvar [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\nvar [CheckboxProviderImpl, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);\nfunction CheckboxProvider(props) {\n  const {\n    __scopeCheckbox,\n    checked: checkedProp,\n    children,\n    defaultChecked,\n    disabled,\n    form,\n    name,\n    onCheckedChange,\n    required,\n    value = \"on\",\n    // @ts-expect-error\n    internal_do_not_use_render\n  } = props;\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked ?? false,\n    onChange: onCheckedChange,\n    caller: CHECKBOX_NAME\n  });\n  const [control, setControl] = React.useState(null);\n  const [bubbleInput, setBubbleInput] = React.useState(null);\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = control ? !!form || !!control.closest(\"form\") :\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  true;\n  const context = {\n    checked,\n    disabled,\n    setChecked,\n    control,\n    setControl,\n    name,\n    form,\n    value,\n    hasConsumerStoppedPropagationRef,\n    required,\n    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,\n    isFormControl,\n    bubbleInput,\n    setBubbleInput\n  };\n  return /* @__PURE__ */jsx(CheckboxProviderImpl, {\n    scope: __scopeCheckbox,\n    ...context,\n    children: isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children\n  });\n}\nvar TRIGGER_NAME = \"CheckboxTrigger\";\nvar CheckboxTrigger = React.forwardRef((_ref, forwardedRef) => {\n  let {\n    __scopeCheckbox,\n    onKeyDown,\n    onClick,\n    ...checkboxProps\n  } = _ref;\n  const {\n    control,\n    value,\n    disabled,\n    checked,\n    required,\n    setControl,\n    setChecked,\n    hasConsumerStoppedPropagationRef,\n    isFormControl,\n    bubbleInput\n  } = useCheckboxContext(TRIGGER_NAME, __scopeCheckbox);\n  const composedRefs = useComposedRefs(forwardedRef, setControl);\n  const initialCheckedStateRef = React.useRef(checked);\n  React.useEffect(() => {\n    const form = control?.form;\n    if (form) {\n      const reset = () => setChecked(initialCheckedStateRef.current);\n      form.addEventListener(\"reset\", reset);\n      return () => form.removeEventListener(\"reset\", reset);\n    }\n  }, [control, setChecked]);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    role: \"checkbox\",\n    \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked,\n    \"aria-required\": required,\n    \"data-state\": getState(checked),\n    \"data-disabled\": disabled ? \"\" : void 0,\n    disabled,\n    value,\n    ...checkboxProps,\n    ref: composedRefs,\n    onKeyDown: composeEventHandlers(onKeyDown, event => {\n      if (event.key === \"Enter\") event.preventDefault();\n    }),\n    onClick: composeEventHandlers(onClick, event => {\n      setChecked(prevChecked => isIndeterminate(prevChecked) ? true : !prevChecked);\n      if (bubbleInput && isFormControl) {\n        hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n        if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n      }\n    })\n  });\n});\nCheckboxTrigger.displayName = TRIGGER_NAME;\nvar Checkbox = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCheckbox,\n    name,\n    checked,\n    defaultChecked,\n    required,\n    disabled,\n    value,\n    onCheckedChange,\n    form,\n    ...checkboxProps\n  } = props;\n  return /* @__PURE__ */jsx(CheckboxProvider, {\n    __scopeCheckbox,\n    checked,\n    defaultChecked,\n    disabled,\n    required,\n    onCheckedChange,\n    name,\n    form,\n    value,\n    internal_do_not_use_render: _ref2 => {\n      let {\n        isFormControl\n      } = _ref2;\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [/* @__PURE__ */jsx(CheckboxTrigger, {\n          ...checkboxProps,\n          ref: forwardedRef,\n          __scopeCheckbox\n        }), isFormControl && /* @__PURE__ */jsx(CheckboxBubbleInput, {\n          __scopeCheckbox\n        })]\n      });\n    }\n  });\n});\nCheckbox.displayName = CHECKBOX_NAME;\nvar INDICATOR_NAME = \"CheckboxIndicator\";\nvar CheckboxIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCheckbox,\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || isIndeterminate(context.checked) || context.checked === true,\n    children: /* @__PURE__ */jsx(Primitive.span, {\n      \"data-state\": getState(context.checked),\n      \"data-disabled\": context.disabled ? \"\" : void 0,\n      ...indicatorProps,\n      ref: forwardedRef,\n      style: {\n        pointerEvents: \"none\",\n        ...props.style\n      }\n    })\n  });\n});\nCheckboxIndicator.displayName = INDICATOR_NAME;\nvar BUBBLE_INPUT_NAME = \"CheckboxBubbleInput\";\nvar CheckboxBubbleInput = React.forwardRef((_ref3, forwardedRef) => {\n  let {\n    __scopeCheckbox,\n    ...props\n  } = _ref3;\n  const {\n    control,\n    hasConsumerStoppedPropagationRef,\n    checked,\n    defaultChecked,\n    required,\n    disabled,\n    name,\n    value,\n    form,\n    bubbleInput,\n    setBubbleInput\n  } = useCheckboxContext(BUBBLE_INPUT_NAME, __scopeCheckbox);\n  const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = bubbleInput;\n    if (!input) return;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    const bubbles = !hasConsumerStoppedPropagationRef.current;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);\n  const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n  return /* @__PURE__ */jsx(Primitive.input, {\n    type: \"checkbox\",\n    \"aria-hidden\": true,\n    defaultChecked: defaultChecked ?? defaultCheckedRef.current,\n    required,\n    disabled,\n    name,\n    value,\n    form,\n    ...props,\n    tabIndex: -1,\n    ref: composedRefs,\n    style: {\n      ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0,\n      // We transform because the input is absolutely positioned but we have\n      // rendered it **after** the button. This pulls it back to sit on top\n      // of the button.\n      transform: \"translateX(-100%)\"\n    }\n  });\n});\nCheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction isIndeterminate(checked) {\n  return checked === \"indeterminate\";\n}\nfunction getState(checked) {\n  return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nexport { Checkbox, CheckboxIndicator, CheckboxIndicator as Indicator, Checkbox as Root, createCheckboxScope, CheckboxBubbleInput as unstable_BubbleInput, CheckboxBubbleInput as unstable_CheckboxBubbleInput, CheckboxProvider as unstable_CheckboxProvider, CheckboxTrigger as unstable_CheckboxTrigger, CheckboxProvider as unstable_Provider, CheckboxTrigger as unstable_Trigger };","map":{"version":3,"names":["React","useComposedRefs","createContextScope","composeEventHandlers","useControllableState","usePrevious","useSize","Presence","Primitive","Fragment","jsx","jsxs","CHECKBOX_NAME","createCheckboxContext","createCheckboxScope","CheckboxProviderImpl","useCheckboxContext","CheckboxProvider","props","__scopeCheckbox","checked","checkedProp","children","defaultChecked","disabled","form","name","onCheckedChange","required","value","internal_do_not_use_render","setChecked","prop","defaultProp","onChange","caller","control","setControl","useState","bubbleInput","setBubbleInput","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","context","isIndeterminate","scope","isFunction","TRIGGER_NAME","CheckboxTrigger","forwardRef","_ref","forwardedRef","onKeyDown","onClick","checkboxProps","composedRefs","initialCheckedStateRef","useEffect","reset","current","addEventListener","removeEventListener","button","type","role","getState","ref","event","key","preventDefault","prevChecked","isPropagationStopped","stopPropagation","displayName","Checkbox","_ref2","CheckboxBubbleInput","INDICATOR_NAME","CheckboxIndicator","forceMount","indicatorProps","present","span","style","pointerEvents","BUBBLE_INPUT_NAME","_ref3","controlSize","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","bubbles","Event","indeterminate","call","dispatchEvent","defaultCheckedRef","tabIndex","position","opacity","margin","transform"],"sources":["/Users/jasonglaspey/Coding/Lost Valley - Image Management/web-app/client/node_modules/@radix-ui/react-checkbox/src/checkbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue<State extends CheckedState | boolean = CheckedState> = {\n  checked: State | boolean;\n  setChecked: React.Dispatch<React.SetStateAction<State | boolean>>;\n  disabled: boolean | undefined;\n  control: HTMLButtonElement | null;\n  setControl: React.Dispatch<React.SetStateAction<HTMLButtonElement | null>>;\n  name: string | undefined;\n  form: string | undefined;\n  value: string | number | readonly string[];\n  hasConsumerStoppedPropagationRef: React.RefObject<boolean>;\n  required: boolean | undefined;\n  defaultChecked: boolean | undefined;\n  isFormControl: boolean;\n  bubbleInput: HTMLInputElement | null;\n  setBubbleInput: React.Dispatch<React.SetStateAction<HTMLInputElement | null>>;\n};\n\nconst [CheckboxProviderImpl, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CheckboxProviderProps<State extends CheckedState = CheckedState> {\n  checked?: State | boolean;\n  defaultChecked?: State | boolean;\n  required?: boolean;\n  onCheckedChange?(checked: State | boolean): void;\n  name?: string;\n  form?: string;\n  disabled?: boolean;\n  value?: string | number | readonly string[];\n  children?: React.ReactNode;\n}\n\nfunction CheckboxProvider<State extends CheckedState = CheckedState>(\n  props: ScopedProps<CheckboxProviderProps<State>>\n) {\n  const {\n    __scopeCheckbox,\n    checked: checkedProp,\n    children,\n    defaultChecked,\n    disabled,\n    form,\n    name,\n    onCheckedChange,\n    required,\n    value = 'on',\n    // @ts-expect-error\n    internal_do_not_use_render,\n  } = props;\n\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked ?? false,\n    onChange: onCheckedChange,\n    caller: CHECKBOX_NAME,\n  });\n  const [control, setControl] = React.useState<HTMLButtonElement | null>(null);\n  const [bubbleInput, setBubbleInput] = React.useState<HTMLInputElement | null>(null);\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = control\n    ? !!form || !!control.closest('form')\n    : // We set this to true by default so that events bubble to forms without JS (SSR)\n      true;\n\n  const context: CheckboxContextValue<State> = {\n    checked: checked,\n    disabled: disabled,\n    setChecked: setChecked,\n    control: control,\n    setControl: setControl,\n    name: name,\n    form: form,\n    value: value,\n    hasConsumerStoppedPropagationRef: hasConsumerStoppedPropagationRef,\n    required: required,\n    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,\n    isFormControl: isFormControl,\n    bubbleInput,\n    setBubbleInput,\n  };\n\n  return (\n    <CheckboxProviderImpl\n      scope={__scopeCheckbox}\n      {...(context as unknown as CheckboxContextValue<CheckedState>)}\n    >\n      {isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children}\n    </CheckboxProviderImpl>\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CheckboxTrigger';\n\ninterface CheckboxTriggerProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof Primitive.button>,\n    keyof CheckboxProviderProps\n  > {\n  children?: React.ReactNode;\n}\n\nconst CheckboxTrigger = React.forwardRef<HTMLButtonElement, CheckboxTriggerProps>(\n  (\n    { __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }: ScopedProps<CheckboxTriggerProps>,\n    forwardedRef\n  ) => {\n    const {\n      control,\n      value,\n      disabled,\n      checked,\n      required,\n      setControl,\n      setChecked,\n      hasConsumerStoppedPropagationRef,\n      isFormControl,\n      bubbleInput,\n    } = useCheckboxContext(TRIGGER_NAME, __scopeCheckbox);\n    const composedRefs = useComposedRefs(forwardedRef, setControl);\n\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = control?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [control, setChecked]);\n\n    return (\n      <Primitive.button\n        type=\"button\"\n        role=\"checkbox\"\n        aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n        aria-required={required}\n        data-state={getState(checked)}\n        data-disabled={disabled ? '' : undefined}\n        disabled={disabled}\n        value={value}\n        {...checkboxProps}\n        ref={composedRefs}\n        onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n          // According to WAI ARIA, Checkboxes don't activate on enter keypress\n          if (event.key === 'Enter') event.preventDefault();\n        })}\n        onClick={composeEventHandlers(onClick, (event) => {\n          setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n          if (bubbleInput && isFormControl) {\n            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n            // if checkbox has a bubble input and is a form control, stop\n            // propagation from the button so that we only propagate one click\n            // event (from the input). We propagate changes from an input so\n            // that native form validation works and form events reflect\n            // checkbox updates.\n            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n          }\n        })}\n      />\n    );\n  }\n);\n\nCheckboxTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\ntype CheckboxElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      value,\n      onCheckedChange,\n      form,\n      ...checkboxProps\n    } = props;\n\n    return (\n      <CheckboxProvider\n        __scopeCheckbox={__scopeCheckbox}\n        checked={checked}\n        defaultChecked={defaultChecked}\n        disabled={disabled}\n        required={required}\n        onCheckedChange={onCheckedChange}\n        name={name}\n        form={form}\n        value={value}\n        // @ts-expect-error\n        internal_do_not_use_render={({ isFormControl }: CheckboxContextValue) => (\n          <>\n            <CheckboxTrigger\n              {...checkboxProps}\n              ref={forwardedRef}\n              // @ts-expect-error\n              __scopeCheckbox={__scopeCheckbox}\n            />\n            {isFormControl && (\n              <CheckboxBubbleInput\n                // @ts-expect-error\n                __scopeCheckbox={__scopeCheckbox}\n              />\n            )}\n          </>\n        )}\n      />\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence\n        present={forceMount || isIndeterminate(context.checked) || context.checked === true}\n      >\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'CheckboxBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface CheckboxBubbleInputProps extends Omit<InputProps, 'checked'> {}\n\nconst CheckboxBubbleInput = React.forwardRef<HTMLInputElement, CheckboxBubbleInputProps>(\n  ({ __scopeCheckbox, ...props }: ScopedProps<CheckboxBubbleInputProps>, forwardedRef) => {\n    const {\n      control,\n      hasConsumerStoppedPropagationRef,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      name,\n      value,\n      form,\n      bubbleInput,\n      setBubbleInput,\n    } = useCheckboxContext(BUBBLE_INPUT_NAME, __scopeCheckbox);\n\n    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n\n    // Bubble checked change to parents (e.g form change event)\n    React.useEffect(() => {\n      const input = bubbleInput;\n      if (!input) return;\n\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        'checked'\n      ) as PropertyDescriptor;\n      const setChecked = descriptor.set;\n\n      const bubbles = !hasConsumerStoppedPropagationRef.current;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event('click', { bubbles });\n        input.indeterminate = isIndeterminate(checked);\n        setChecked.call(input, isIndeterminate(checked) ? false : checked);\n        input.dispatchEvent(event);\n      }\n    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);\n\n    const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n    return (\n      <Primitive.input\n        type=\"checkbox\"\n        aria-hidden\n        defaultChecked={defaultChecked ?? defaultCheckedRef.current}\n        required={required}\n        disabled={disabled}\n        name={name}\n        value={value}\n        form={form}\n        {...props}\n        tabIndex={-1}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          ...controlSize,\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0,\n          margin: 0,\n          // We transform because the input is absolutely positioned but we have\n          // rendered it **after** the button. This pulls it back to sit on top\n          // of the button.\n          transform: 'translateX(-100%)',\n        }}\n      />\n    );\n  }\n);\n\nCheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction isFunction(value: unknown): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxProvider,\n  CheckboxTrigger,\n  CheckboxIndicator,\n  CheckboxBubbleInput,\n  //\n  Checkbox as Root,\n  CheckboxProvider as Provider,\n  CheckboxTrigger as Trigger,\n  CheckboxIndicator as Indicator,\n  CheckboxBubbleInput as BubbleInput,\n};\nexport type {\n  CheckboxProps,\n  CheckboxProviderProps,\n  CheckboxTriggerProps,\n  CheckboxIndicatorProps,\n  CheckboxBubbleInputProps,\n  CheckedState,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}